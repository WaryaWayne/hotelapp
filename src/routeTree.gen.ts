/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as RecentDocumentsRouteImport } from './routes/recent-documents'
import { Route as ReceiptRouteImport } from './routes/receipt'
import { Route as QuoteRouteImport } from './routes/quote'
import { Route as InvoiceRouteImport } from './routes/invoice'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const RecentDocumentsRoute = RecentDocumentsRouteImport.update({
  id: '/recent-documents',
  path: '/recent-documents',
  getParentRoute: () => rootRouteImport,
} as any)
const ReceiptRoute = ReceiptRouteImport.update({
  id: '/receipt',
  path: '/receipt',
  getParentRoute: () => rootRouteImport,
} as any)
const QuoteRoute = QuoteRouteImport.update({
  id: '/quote',
  path: '/quote',
  getParentRoute: () => rootRouteImport,
} as any)
const InvoiceRoute = InvoiceRouteImport.update({
  id: '/invoice',
  path: '/invoice',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/invoice': typeof InvoiceRoute
  '/quote': typeof QuoteRoute
  '/receipt': typeof ReceiptRoute
  '/recent-documents': typeof RecentDocumentsRoute
  '/settings': typeof SettingsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/invoice': typeof InvoiceRoute
  '/quote': typeof QuoteRoute
  '/receipt': typeof ReceiptRoute
  '/recent-documents': typeof RecentDocumentsRoute
  '/settings': typeof SettingsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/invoice': typeof InvoiceRoute
  '/quote': typeof QuoteRoute
  '/receipt': typeof ReceiptRoute
  '/recent-documents': typeof RecentDocumentsRoute
  '/settings': typeof SettingsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/invoice'
    | '/quote'
    | '/receipt'
    | '/recent-documents'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/invoice'
    | '/quote'
    | '/receipt'
    | '/recent-documents'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/invoice'
    | '/quote'
    | '/receipt'
    | '/recent-documents'
    | '/settings'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  InvoiceRoute: typeof InvoiceRoute
  QuoteRoute: typeof QuoteRoute
  ReceiptRoute: typeof ReceiptRoute
  RecentDocumentsRoute: typeof RecentDocumentsRoute
  SettingsRoute: typeof SettingsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recent-documents': {
      id: '/recent-documents'
      path: '/recent-documents'
      fullPath: '/recent-documents'
      preLoaderRoute: typeof RecentDocumentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/receipt': {
      id: '/receipt'
      path: '/receipt'
      fullPath: '/receipt'
      preLoaderRoute: typeof ReceiptRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/quote': {
      id: '/quote'
      path: '/quote'
      fullPath: '/quote'
      preLoaderRoute: typeof QuoteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/invoice': {
      id: '/invoice'
      path: '/invoice'
      fullPath: '/invoice'
      preLoaderRoute: typeof InvoiceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  InvoiceRoute: InvoiceRoute,
  QuoteRoute: QuoteRoute,
  ReceiptRoute: ReceiptRoute,
  RecentDocumentsRoute: RecentDocumentsRoute,
  SettingsRoute: SettingsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
